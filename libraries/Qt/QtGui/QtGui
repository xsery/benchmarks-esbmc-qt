#ifndef QtGUI_H
#define QtGUI_H

#include "../QtWidgets/QMainWindow"
#include "../QtWidgets/QApplication"
#include "string"
#include "../../fstream"

typedef float qreal;

#define qApp 0

//#define SIGNAL(a)   qFlagLocation("2"#a)
//#define SLOT(a)     qFlagLocation("1"#a)
#define emit
#define animatedtiles
#define signals public
#define Q_OBJECT
#define slots
#define Q_SIGNALS public
#define QT_BEGIN_NAMESPACE
#define QT_END_NAMESPACE

//#define QString std::string


#if 0
#define Q_PROPERTY
#define pos
#define READ
#define WRITE
#define setPos
#endif

void Q_INIT_RESOURCE ( char* name );

enum CacheMode{ NoCache, ItemCoordinateCache, DeviceCoordinateCache };

const char *qFlagLocation(const char *method){}

namespace Qt{
	enum GlobalColor{ white, lightGray, darkGray, black, red, green, blue };
	enum PenStyle{ NoPen };
	enum KeepAspectRatio{};
	enum AspectRatioMode{ IgnoreAspectRatio };
	enum Orientation{ Horizontal, Vertical };
	enum AlignmentFlag{ AlignLeft, AlignTop };
	enum ScrollBarPolicy{ ScrollBarAsNeeded, ScrollBarAlwaysOff, ScrollBarAlwaysOn };
};

int SIGNAL( int a ){}
int SLOT( int b ){}
void update();
void setAcceptHoverEvents ( bool enabled );
void Q_INIT_RESOURCE ();
qreal cos( double x );
qreal sin( double x );
int qrand();
template <class T>
	QT_TRANSLATE_NOOP ( T context, const char* sourceText );

class QString
{
	std::string str;
public:
	QString (){}
	QString ( const char * unicode ){
		__ESBMC_assert(unicode != NULL, "Invalid string");
	}
	std::string	toStdString () const{}
	bool isEmpty () const{}
	~QString (){}
};

QString fromUtf8 ( const char * str, int size = -1 ){}

class QColor
{
public:
	QColor();
};

class QSize{
public:
	QSize (){}
	QSize ( int width, int height ){}
	int width () const{}
	int height (){}
};

class QSizePolicy
{
public:
	enum Policy{ Expanding, Preferred, Fixed, Minimum };
	QSizePolicy(){}
	QSizePolicy ( Policy horizontal, Policy vertical ){}
	void setHorizontalStretch ( unsigned char stretchFactor ){}
	void setVerticalStretch ( unsigned char stretchFactor ){}
	bool hasHeightForWidth () const{}
	void setHeightForWidth ( bool dependent ){}
};

class QLayout{
public:
	QLayout (){}
};

class QPalette{
public:
	enum ColorRole{ WindowText };
	QPalette(){}
	void	setColor ( ColorRole role, const Qt::GlobalColor & color ){}
};

class QWidget 
{
public:
	QWidget(){}
	QWidget( QWidget* ){}
	void setLayout ( QLayout * layout ){}
	void show (){}
	void setWindowTitle ( const char* str ){}
	void setParent ( QWidget * parent ){}
	void setWindowTitle ( const QString & ){}
	void resize ( int w, int h ){
		__ESBMC_assert(w >= 0, "First parameter must be greater or equal than zero.");
		__ESBMC_assert(h >= 0, "First parameter must be greater or equal than zero.");
	}
	void	setPalette ( const QPalette & ){}
	QString	objectName () const{}
	void	setObjectName ( const QString & name ){}
	bool isEnabled () const{}
	void setEnabled ( bool ){}
};

class QPushButton{
public:
	QPushButton ( QWidget * parent = 0 ){}
	QPushButton ( const QString & text, QWidget * parent = 0 ){}
	void setAutoExclusive ( bool ){}
	void setCheckable ( bool ){}
};

class QMainWindow : public QWidget{
public:
	QMainWindow(){}
	void setCentralWidget ( QWidget * widget ){}
};

class QTimer
{
public:
	QTimer(){}
	QTimer( QMainWindow* window ){}
	void start ( int i ){
		__ESBMC_assert(i >= 0, "Time specified invalid.");
	}
	void setSingleShot ( bool b ){}
	void start(){}
	void stop(){}
	void setInterval ( int msec ){}
};

class QLCDNumber : public QWidget{
public:
	QLCDNumber(){}
	void display ( QString s ){}
	void display ( int s ){}
	void setFixedSize ( int x, int y ){
		__ESBMC_assert( x >= 0, "The first parameter must be greater than zero.");
		__ESBMC_assert( y >= 0, "The second parameter must be greater than zero.");
	}
	void setDigitCount ( int numDigits ){
		__ESBMC_assert(numDigits > 0, "The parameter must be greater than zero.");
	}
};

class QPointF
{
public:
	QPointF();
	QPointF( qreal x, qreal y );
};


class QVariant{
public:
	QVariant(){}
	QVariant( bool value ){}
	QPointF toPointF () const{}
};

class QComboBox{
public:
	QComboBox(){}
	void addItem ( const QString & text, const QVariant & userData = QVariant() ){}
};

class QObject
{
public:
	QObject ( QObject * parent = 0 ){}
	~QObject (){}
	static bool connect( QTimer* spin, const char* str_f, QLCDNumber* slider, const char* str_l ){}
	static bool connect( QTimer* spin, const char* str_f, QMainWindow* slider, const char* str_l ){}
	static bool connect( QComboBox* spin, const char* str_f, QMainWindow* slider, const char* str_l ){}
	static bool connect( QPushButton* spin, const char* str_f, QLCDNumber* slider, const char* str_l ){}
    static bool connect(QPushButton * pb, int signal , const char * app , int sl){}

#if 0	
	static bool connect(const QObject *sender, const char *signal,
                        const QObject *receiver, const char *member, ConnectionType =
#ifdef qdoc
                        AutoConnection
#else
#ifdef QT3_SUPPORT
                        AutoCompatConnection
#else
                        AutoConnection
#endif
#endif
        ){}
#endif

};

class QSizeF{
public:
	QSizeF(){}
	qreal width () {}
	QSize	toSize () const{}
};


bool fexists(const char* filename){
	std::ifstream file(filename);
	return file.is_open();
}

class QPixmap
{
public:
	QPixmap (){}
	QPixmap ( int width, int height ){}
	QPixmap ( const char * xpm ){
		__ESBMC_assert(fexists(xpm),"invalid file");
	}
	int width () const;
	int height () const;
	QSize size () const{}
	QPixmap scaled ( QSize qsize ){}
};

class QRectF
{
public:
	QRectF();
	QRectF(int a, int b, int c, int d);
	QRectF ( const QPointF & topLeft, const QPointF & bottomRight ){}
	QPointF topLeft();
	QPointF bottomRight();
	QRectF adjusted ( qreal dx1, qreal dy1, qreal dx2, qreal dy2 ) const;
	qreal width () {}
	qreal height() const;
	void	adjust ( qreal dx1, qreal dy1, qreal dx2, qreal dy2 );
	QSizeF size () const{}
	~QRectF();
};

class QPainterPath
{
public:
	QPainterPath();
	void addEllipse ( const QRectF & boundingRectangle ){}
	bool isEmpty(){}
	void moveTo ( const QPointF & point ){}
	QPointF pointAtPercent ( qreal t ) const{}
};

class QGraphicsItem
{
public:
	QGraphicsItem ( QGraphicsItem * parent = 0 );
	void setCacheMode ( CacheMode mode, const QSize & logicalCacheSize = QSize() );
	void setZValue ( qreal z );
	void setPos ( qreal x, qreal y );
	void scale ( double x, double y ) const;
	QPainterPath shape () const{}
	void installSceneEventFilter ( QGraphicsItem * filterItem ){}
	~QGraphicsItem ();
};

void setCacheMode ( QGraphicsItem::CacheMode mode, const QSize & logicalCacheSize = QSize() );

class QGraphicsPixmapItem : public QGraphicsItem
{
public:
	
	enum ShapeMode{ BoundingRectShape };	
	
	QGraphicsPixmapItem ( const QPixmap pixmap ){}
	QGraphicsPixmapItem( QGraphicsItem* pixmap ){}
	~QGraphicsPixmapItem ();
	void	setPixmap ( const QPixmap & pixmap ){}
	void setOffset (int x, int y){}
	void setShapeMode ( ShapeMode mode ){}
	QRectF boundingRect () const{}
};

class QGraphicsWidget : public QWidget, public QGraphicsItem
{
public:
	QGraphicsWidget();
	QGraphicsWidget( QGraphicsItem* );
	void setGeometry ( const QRectF & rect ){}
	void setObjectName ( char* name ){}
};

class QBrush
{
public:
	QBrush();
};

class QStyle
{
public:
	enum StateFlag{ State_Sunken, State_MouseOver };
	QStyle();
	int state;
};

class QStyleOptionGraphicsItem : public QStyle
{
public:
	QStyleOptionGraphicsItem();
};

class QGraphicsSceneMouseEvent
{
public:
	QGraphicsSceneMouseEvent();
};

class QGradient : public QColor
{
public:
	QGradient();
};
class QLinearGradient : public QGradient
{
public:
	QLinearGradient();
	QLinearGradient ( const QPointF & start, const QPointF & finalStop );
	void  setColorAt ( int y, Qt::GlobalColor color);
};

class QPainter
{
public:
	enum RenderHint{ Antialiasing, SmoothPixmapTransform };
	QPainter();
	void setPen ( Qt::GlobalColor color );
	void setPen ( Qt::PenStyle pen );
	void setBrush ( const QLinearGradient & brush );
	void drawEllipse ( const QRectF & rectangle );
	void translate ( qreal dx, qreal dy );
	void drawPixmap ( const QRectF & target, const QPixmap & pixmap, const QRectF & source );
	void drawPixmap ( const QPointF pixmap, const QPixmap source );
	void drawPixmap ( int target, int x, const QPixmap & pixmap );
};

class QResizeEvent
{
public:
	QResizeEvent();
};

class QGraphicsScene : public QGraphicsItem
{
public:
	QGraphicsScene();
	QGraphicsScene( int a, int b, int c, int d );
	void addItem ( QGraphicsItem * item );
	void setBackgroundBrush ( Qt::GlobalColor brush ){}
};

class QGraphicsView : public QWidget
{
public:
	enum ViewportUpdateMode{ BoundingRectViewportUpdate };
	enum CacheModeFlag{ CacheBackground, CacheNone };
	QGraphicsView();
	QGraphicsView( QGraphicsScene* );
	QGraphicsView( QWidget* );
	void resizeEvent ( QResizeEvent * event );
	void fitInView ( const QRectF & rect, Qt::KeepAspectRatio keepAspectRatio );
	void setWindowTitle ( const QString & title );
	void setViewportUpdateMode ( ViewportUpdateMode mode );
	void setBackgroundBrush ( const QPixmap & pixmap );
	void setCacheMode ( CacheModeFlag mode );
	void setRenderHints ( int hints );
	void show();
	void setFrameStyle ( int x ){}
	void setAlignment ( int alignment ){}
	void setHorizontalScrollBarPolicy ( Qt::ScrollBarPolicy ){}
	void setVerticalScrollBarPolicy ( Qt::ScrollBarPolicy ){}
	void resize( qreal x, qreal y ){}
	void setObjectName ( const QString & name ){}	
	QSizePolicy sizePolicy() const{}
	void setSizePolicy ( QSizePolicy ){}
};

QRectF	sceneRect () const;
void	setSceneRect ( const QRectF & rect );
void	setSceneRect ( qreal x, qreal y, qreal w, qreal h );

class QApplication{
public:
	enum Encoding{ UnicodeUTF8 };
	QApplication( int & argc, char ** argv ){
		__ESBMC_assert(argc > 0, "invalid parameter");
	}
	int exec(){}
	static QString translate ( const char * context, const char * sourceText, int disambiguation, Encoding encoding, int n = 0){}
};

template<class T> class QList
{
public:
	QList (){}
	void operator<< ( T ){}
	int count () const{}
	const T & at ( int i ) const{}
	T& operator[] ( int i ){}
	int size () const{}
	~QList (){}
};

class QGraphicsRectItem : public QGraphicsItem
{
public:
	QGraphicsRectItem ( QGraphicsItem * parent = 0 ){}
};

class QEasingCurve
{
public:
	enum Type{ InOutBack };
	QEasingCurve(){}
	qreal valueForProgress ( qreal progress ) const{}
};

class QByteArray
{
public:
	QByteArray(){}
};

class QPropertyAnimation
{
public:
	QPropertyAnimation(){}
	QPropertyAnimation( QObject* target, char* propertyName ){}
	QPropertyAnimation ( QObject * target, const QByteArray & propertyName, QObject * parent = 0 ){}
	void setDuration( int i ){}
	void setEasingCurve ( QEasingCurve::Type easing ){}
	void updateCurrentTime ( int currentTime ){}
};

class QParallelAnimationGroup
{
public:
	QParallelAnimationGroup(){}
	void addAnimation ( QPropertyAnimation * animation );
};

class QAbstractTransition
{
public:
	QAbstractTransition(){}
	void addAnimation ( QParallelAnimationGroup * animation );
};

class QRect{
public:
	QRect (){}
	QRect ( int x, int y, int width, int height ){}
};

class QAbstractState : public QObject
{
public:
	QAbstractState(){}
};

class QState : public QAbstractState
{
public:
	QState(){}
	QState( QState* state ){}
	void addState ( QState * state );
	void assignProperty ( QObject * object, char * name, QPointF value ){}
	void setInitialState ( QState * state ){}
	QAbstractTransition * addTransition ( QGraphicsWidget * target, const char* signal, QState* state ){}
	QAbstractTransition * addTransition ( QTimer * target, const char* signal, QState* state ){}
	QAbstractTransition * addTransition ( QObject * target, const char* signal, QState* state ){}
	void assignProperty ( QObject * object, const char * name, const QRect & value ){}
	void setObjectName ( const char* name ){}
};

class QStateMachine : public QState
{
public:
	enum RestorePolicy{ DontRestoreProperties, RestoreProperties };
	QStateMachine(){}
	void setInitialState ( QAbstractState * state );
	void start();
	void addDefaultAnimation ( QPropertyAnimation* animation ){}
	void setGlobalRestorePolicy ( QStateMachine::RestorePolicy restorePolicy ){}
};

int pressed();
int timeout();
//void SIGNAL ( int signal );

class QTextEdit{
public:
	QTextEdit ( QWidget * parent = 0 ){}
	QTextEdit ( const QString & text, QWidget * parent = 0 ){}
	~QTextEdit (){}
};

int clicked ( bool checked = false ){}

int quit(){}

class QLabel{
public:
	QLabel( char* label ){
		__ESBMC_assert(label != NULL, "Invalid string");
	}
	QLabel( QWidget* label ){}
	void show(){}	
	void setObjectName ( const QString & name ){}
	void setText ( QString str ){}
};

class QDialog{
public:
	QDialog();
	~QDialog();
};

class QSpinBox{
public:
	QSpinBox(){}
	void setRange ( int minimum, int maximum ){}
};

class QSlider : public QSpinBox{
public:
	QSlider(){}
	QSlider ( Qt::Orientation orientation, QWidget * parent = 0 ){}
	void setValue ( int val ){}
};

class QGridLayout : public QWidget
{
public:
	QGridLayout (){}
	QGridLayout( QWidget* parent ){}
	void addWidget ( QLabel* widget, int fromRow, int fromColumn, int rowSpan, int columnSpan ){}
	void addWidget ( QSpinBox* widget, int fromRow, int fromColumn, int rowSpan, int columnSpan ){}
	void addWidget ( QWidget* widget, int fromRow, int fromColumn, int rowSpan, int columnSpan ){}
	void addLayout ( QLayout * layout, int x = 0 , int y = 0, int z = 0, int w = 0 ){}
};

class QHBoxLayout{
public:
	QHBoxLayout(){}
	QHBoxLayout	addWidget ( QTextEdit * w ){}
	QHBoxLayout	addWidget ( QPushButton * w ){}
};

class QLayoutItem
{
public:
		QLayoutItem (){}
		QLayoutItem ( Qt::AlignmentFlag alignment ){}
};

class QVBoxLayout : public QLayout
{
public:
	QVBoxLayout (){}
	QVBoxLayout ( QWidget * parent ){}
	~QVBoxLayout (){}
	QVBoxLayout	addWidget ( QTextEdit * w ){}
	QVBoxLayout	addWidget ( QPushButton * w ){}
	QVBoxLayout	addWidget ( QLCDNumber * w ){}
	QVBoxLayout	addWidget ( QComboBox * w ){}
	QVBoxLayout	addWidget ( QWidget * w ){}
	void addLayout ( QLayout * layout, int stretch = 0 ){}
	void addLayout ( QGridLayout * layout, int stretch = 0 ){}
	void addLayout ( QHBoxLayout * layout, int stretch = 0 ){}
	void setObjectName ( const QString & name ){}
	void addItem ( QLayoutItem * item ){}
};

class QTime{
public:
	QTime(){}
	QTime ( int h, int m, int s = 0, int ms = 0 ){}
	QTime addSecs ( int s ) const{}
	int minute () const{}
	int second () const{}
	bool setHMS ( int h, int m, int s, int ms = 0 ){}
	QString toString () const{}
	QString toString ( QString str ) const{}
	QTime addMSecs ( int ms ) const{}
	int msec () const{}
	static QTime currentTime (){}
};

void connect( QSpinBox* spin, const char* str_f, QSlider* slider, const char* str_l ){}
void connect( QSlider* spin, const char* str_f, QSpinBox* slider, const char* str_l ){}
void connect( QPushButton* spin, const char* str_f, QWidget* slider, const char* str_l ){}
void connect( QTimer* spin, const char* str_f, QLCDNumber* slider, const char* str_l ){}

class QStringList{
public:
	QStringList(){}
};

template <class Key, class T>
class QMap
{
public:
	QMap(){}
};

typedef QList<QObject *> QObjectList;

class QRadioButton : public QWidget
{
public:
	QRadioButton ( QWidget * parent = 0 ){}
	QRadioButton ( const QString & text, QWidget * parent = 0 ){}
	void setObjectName ( const QString & name ){}
	void setChecked ( bool ){}
	~QRadioButton (){}
	void setText ( QString str ){}
};

class QFormLayout : public QWidget
{
public:
	enum FieldGrowthPolicy{ AllNonFixedFieldsGrow };
	enum ItemRole{ LabelRole, FieldRole };
	QFormLayout ( QWidget * parent = 0 ){}
	FieldGrowthPolicy	fieldGrowthPolicy () const{}
	void setFieldGrowthPolicy ( FieldGrowthPolicy policy ){}
	void setWidget ( int value, ItemRole role, QLabel * widget ){}
	void setWidget ( int value, ItemRole role, QWidget * widget ){}
	~QFormLayout (){}
};

class QDoubleSpinBox : public QWidget
{
public:
	QDoubleSpinBox ( QWidget * parent = 0 ){}
	~QDoubleSpinBox (){}
	double minimum () const{}
	void setMinimum ( double min ){}
	double singleStep () const{}
	void setSingleStep ( double val ){}
	double value () const{}
	void setValue ( double val ){}
};

class QButtonGroup : public QObject
{
public:
	QButtonGroup ( QObject * parent = 0 ){}
	QButtonGroup ( QWidget * parent = 0 ){}
	void setObjectName ( const QString & name ){}
	void addButton ( QRadioButton * button ){}
	void setId ( QRadioButton * button, int id ){}
	~QButtonGroup (){}
};

class QGroupBox : public QWidget
{
public:
	QGroupBox ( QWidget * parent = 0 ){}
	QSizePolicy sizePolicy() const{}
	void setSizePolicy ( QSizePolicy ){}
	QString title () const{}
	void setTitle ( const QString & title ){}
	~QGroupBox (){}
};

class QListView : public QWidget
{
public:
	enum Movement{ Static };
	enum ViewMode{ IconMode };
	QListView ( QWidget * parent = 0 ){}
	Movement	movement () const{}
	void setMovement ( Movement movement ){}
	ViewMode	viewMode () const{}
	void setViewMode ( ViewMode mode ){}
	void setSelectionRectVisible ( bool show ){}
};

class QListWidget : public QListView
{
public:
	QListWidget ( QWidget * parent = 0 ){}
	QSizePolicy	sizePolicy () const{}
	void setSizePolicy ( QSizePolicy ){}
	void setMaximumSize ( const QSize & ){}
	void setVerticalScrollBarPolicy ( Qt::ScrollBarPolicy ){}
	bool setProperty ( const char * name, const QVariant & value ){}
	QSize	iconSize () const{}
	void setIconSize ( const QSize & iconSize ){}
	int minimumHeight () const{}
	void setMinimumHeight ( int minh ){}
	~QListWidget (){}
};

QVariant	endValue () const{}
QVariant	startValue () const{}
int duration(){}

QEasingCurve	easingCurve () const{}
void updateCurrentValue ( const QPointF & value ){}
void valueChanged ( const QPointF & value ){}

class QSpacerItem : public QLayoutItem
{
public:
	QSpacerItem ( int w, int h, QSizePolicy::Policy hPolicy = QSizePolicy::Minimum, QSizePolicy::Policy vPolicy = QSizePolicy::Minimum ){}
};

class QMetaObject
{
public:
	static void connectSlotsByName ( QWidget * object ){}
};

template<typename T>
	T	qFindChild ( const Window * name ) const{}

#endif // QtGUI_H
