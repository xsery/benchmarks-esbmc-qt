/*******************************************************************\

Module: 

Author: MÃ¡rio Angel

Date: 

\*******************************************************************/
#ifndef QTHREAD_H
#define QTHREAD_H

#include "QtDefines.h"
#include <pthread.h>

//unsigned long int threads_id[10]; //Stores the threads id
//int iThreads = 0; //counter for phtread_create
int iRet = 0;

class QThread {
private:
      pthread_t _id;
      pthread_attr_t _attr;

public:
	QThread()
        {
           pthread_attr_init(&_attr);
           pthread_attr_setdetachstate(&_attr, PTHREAD_CREATE_DETACHED);
           pthread_attr_setscope(&_attr, PTHREAD_SCOPE_SYSTEM);
        }

	~QThread()
        {
           pthread_attr_destroy(&_attr);
        }
	
	enum Priority
        {
          IdlePriority,
          LowestPriority,
          LowPriority,
          NormalPriority,
          HighPriority,
          HighestPriority,

          TimeCriticalPriority,

          InheritPriority
    	};

        static void* function(void* ptr)
        {
           if (!ptr)
           {
              return NULL;
           }

           static_cast<QThread*>(ptr)->run();
           pthread_exit(ptr);
           return NULL;
        }

        void start(Priority = InheritPriority)
        {
            pthread_create(&_id, NULL, QThread::function, this);
            //iRet = pthread_create(&_id, NULL, QThread::function, this);
            //__ESBMC_assert(iRet == 1,"ERROR; pthread_create failed");
            
            pthread_detach(_id);
        }

	bool wait(unsigned long time = ULONG_MAX)
	{
            pthread_join(_id, NULL);
	}

protected:
    virtual void run(){ }
        

}; //QThread class

#endif // QTHREAD_H
