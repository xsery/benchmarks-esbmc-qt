/*******************************************************************
 Module: QList
 
 Author: Felipe Monteiro
 
 Date: June 2015
 
 \*******************************************************************/

#ifndef __STL_QLIST
#define __STL_QLIST

#include "../../definitions.h" //OK
#include "QSet" //OK
//#include "QVector" //OK
#include "../../list" //OK

#define LIST_MAX_SIZE 20  //OK

    template<class T>
    class QList {
    public:
        typedef T& reference; //OK
        typedef const T& const_reference; //OK
        typedef unsigned int size_type; //OK
        typedef int difference_type; //OK
        typedef T value_type; //OK
        typedef T* pointer; //OK
        typedef const T* const_pointer; //OK
        
        typedef bool (pred_double)(T, T);
        typedef bool (pred)(T &);
        
        value_type _list[LIST_MAX_SIZE]; //OK
        size_type _size; //OK
        
        class iterator { //OK
        public:
            value_type* it;
            size_type pos;
            
            iterator(const iterator& x){
                this->it = x.it;
                this->pos = x.pos;
            }
            iterator(){}
            iterator& operator=(const iterator& x) {
                this->it = x.it;
                this->pos = x.pos;
                return *this;
            }
            
            T* operator ->() {
                return this->it;
            }
            
            T operator *() {
                return *this->it;
            }
            
            iterator operator ++() {
                this->it++;
                this->pos++;
                return *this;
            }
            iterator operator ++(int) {
                this->it++;
                this->pos++;
                return *this;
            }
            
            iterator operator --() {
                this->it--;
                this->pos--;
                return *this;
            }
            iterator operator --(int) {
                this->it--;
                this->pos--;
                return *this;
            }
            
            bool operator ==(const iterator& x) const {
                if(this->it != x.it)
                    return false;
                return true;
            }
            
            bool operator !=(const iterator& x) const {
                if(this->it == x.it)
                    return false;
                return true;
            }
        };
        
        typedef iterator Iterator; //OK
        
        class const_iterator { //OK
        public:
            value_type* it;
            size_type pos;
            
            const_iterator(const const_iterator& x){
                this->it = x.it;
                this->pos = x.pos;
            }
            const_iterator(){}
            const_iterator& operator=(const const_iterator& x) {
                this->it = x.it;
                this->pos = x.pos;
                return *this;
            }
            
            T* operator ->() {
                return this->it;
            }
            
            T operator *() {
                return *this->it;
            }
            
            const_iterator operator ++() {
                this->it++;
                this->pos++;
                return *this;
            }
            const_iterator operator ++(int) {
                this->it++;
                this->pos++;
                return *this;
            }
            
            const_iterator operator --() {
                this->it--;
                this->pos--;
                return *this;
            }
            const_iterator operator --(int) {
                this->it--;
                this->pos--;
                return *this;
            }
            
            bool operator ==(const const_iterator& x) const {
                if(this->it != x.it)
                    return false;
                return true;
            }
            
            bool operator !=(const const_iterator& x) const {
                if(this->it == x.it)
                    return false;
                return true;
            }
        };
        
        typedef const_iterator ConstIterator; //OK
        
        QList(){ //OK
            this->_size = 0;
        }
        
        QList(const QList<T>& x) { //OK
            for(int i = 0; i < x._size; i++)
                this->_list[i] = x._list[i];
            this->_size = x._size;
        }
        
        QList( QList<T> && other ){
            //TODO
        }
        
        ~QList() { //OK
            for(int i = 0; i < this->_size; i++){
                this->_list[i] = T();
            }
            this->_size = 0;
        }
        
        void append(const T& value){
            this->push_back(value);
        }
        
        void append(const QList<T>& value){
            size_type _s = 0;
            this->clear();
            for(int i = 0; i < _s; i++){
                this->_list[i] = value._list[i];
            }
            this->_size = value._size;
        }
        
        const T& at(int i) const{
            __ESBMC_assert(i >= 0 && i < this->_size, "Invalid parameter");
            return this->_list[i];
        }
        
        int indexOf (T value, int from = 0){
            for (int i = from; i < this->_size; i++) {
                if (this->_list[i] == value) {
                    return i;
                }
            }
            return -1;
        }
        
        iterator& begin() {
            iterator it;
            it.it = &(this->_list[0]);
            it.pos = 0;
            return it;
        }
        
        const_iterator& begin() const {
            const_iterator it;
            it.it = &(this->_list[0]);
            it.pos = 0;
            return it;
        }
        
        const_iterator	cbegin() const{
            const_iterator it;
            it.it = &(this->_list[0]);
            it.pos = 0;
            return it;
        }
        
        iterator& end() {
            iterator it;
            this->_list[this->_size] = value_type();
            it.it = &(this->_list[this->_size]);
            it.pos = this->_size;
            return it;
        }

        const_iterator& end() const {
            const_iterator it;
            this->_list[this->_size] = value_type();
            it.it = &(this->_list[this->_size]);
            it.pos = this->_size;
            return it;
        }
        
        const_iterator cend() const{
            const_iterator it;
            this->_list[this->_size] = value_type();
            it.it = &(this->_list[this->_size]);
            it.pos = this->_size;
            return it;
        }
        
        const_iterator constBegin() const{
            const_iterator it;
            it.it = &(this->_list[0]);
            it.pos = 0;
            return it;
        }
        
        const_iterator constEnd() const{
            const_iterator it;
            this->_list[this->_size] = value_type();
            it.it = &(this->_list[this->_size]);
            it.pos = this->_size;
            return it;
        }
        
        bool contains(const T & value) const{
            for (int i = 0; i < this->_size; i++)
                if (this->_list[i] == value)
                    return true;
            return false;
        }
        
        int	count(const T & value) const{
            int accum = 0;
            for (int i = 0; i < this->_size; i++)
                if (this->_list[i] == value)
                    accum++;
            return accum;
        }
        
        int	count() const{
            return this->_size;
        }
        
        bool endsWith(const T& value) const{
            if (!(this->empty()) & this->_list[this->_size - 1] == value)
                return true;
            return false;
        }
        
        T& first(){
            return this->front();
        }
        
        const T& first() const{
            return this->_list[0];
        }
        
        int	length() const{
            return this->_size;
        }
        
        QList<T> mid(int pos, int length = -1) const{
            __ESBMC_assert(pos >= 0 & pos < this->_size,"Position invalid.");
            __ESBMC_assert(length >= 0 & length <= this->_size,"Position invalid.");
            QList<T> __newList;
            if (length == -1) {
                length = this->_size;
            }
            for (int i = pos; i < length; i++) {
                __newList._list[i] = this->_list[i];
            }
            return __newList;
        }
        
        void move(int from, int to){
            __ESBMC_assert(from >= 0 && from < this->_size, "First position invalid.");
            __ESBMC_assert(to >= 0 && to < this->_size, "Second position invalid.");
            value_type x = this->_list[from];
            if (from != to) {
                if (from < to) {
                    for (int i = from; i < to; i++) {
                        this->_list[i] = this->_list[i+1];
                    }
                } else {
                    for (int i = to; i < from; i++) {
                        this->_list[i] = this->_list[i+1];
                    }
                }
                this->_list[to] = x;
            }
        }
        
        void prepend(const T & value){
            this->insert(this->begin(),value);
        }
        
        int	removeAll(const T & value){
            int j = 0;
            for (int i = 0 ; i < this->_size; i++)
                if (this->_list[i] == value)
                    this->removeAt(i);
            return j;
        }
        
        void removeAt(int i){
            __ESBMC_assert(0 <= i < this->size(),"Invalid position.");
            if (i == this->size() -1) {
                this->_list[this->_size-1] = value_type();
                this->_size--;
            } else {
                for (;i < this->_size - 1; i++)
                    this->_list[i] = this->_list[i+1];
                this->_list[i] = value_type();
                this->_size--;
            }
        }
        
        void removeFirst(){
            __ESBMC_assert(!this->empty(), "List cannot be empty.");
            this->removeAt(0);
        }
        
        void removeLast(){
            __ESBMC_assert(!this->empty(), "List cannot be empty.");
            this->removeAt(this->_size - 1);
        }
        
        bool removeOne(const T& value){
            for (int i = 0 ; i < this->_size; i++)
                if (this->_list[i] == value){
                    this->removeAt(i);
                    return true;
                }
            return false;
        }
        
        void replace(int i, const T& value){
            __ESBMC_assert(0 <= i < this->size(),"Invalid position.");
            this->_list[i] = value;
        }
        
        bool startsWith(const T& value) const{
            if (!(this->empty()) & this->_list[0] == value)
                return true;
            return false;
        }
        
        void swap(int i, int j){
            __ESBMC_assert(0 <= i < this->size(),"Invalid position.");
            __ESBMC_assert(0 <= j < this->size(),"Invalid position.");
            value_type x = this->_list[i];
            this->_list[i] = this->_list[j];
            this->_list[j] = x;
        }
        
        T takeAt(int i){
            __ESBMC_assert(0 <= i < this->size(),"Invalid position.");
            value_type x = this->_list[i];
            this->removeAt(i);
            return x;
        }
        
        T takeFirst(){
            value_type x = this->_list[0];
            this->removeAt(0);
            return x;
        }
        
        T takeLast(){
            value_type x = this->_list[this->_size - 1];
            this->removeAt(this->_size - 1);
            return x;
        }
        
        QSet<T>	toSet() const{
            //TODO
        }
        
        std::list<T> toStdList() const{
            std::list<T> __list;
            for (int i = 0; i < this->_size; i++)
                __list.push_back(this->_list[i]);
            return __list;
        }

        //QVector< T > toVector() {
            //QVector< T > x;
            //return x;
        //}
        
        T value(int i) const{
            if (0 <= i < this->size())
                return this->_list[i];
            return value_type();
        }
        
        T value(int i, const T& defaultValue) const{
            if (0 <= i < this->size())
                return this->_list[i];
            return defaultValue;
        }
        
        size_type size() const {
            return this->_size;
        }
        
        bool empty() const {
            if (this->_size == 0)
                return true;
            return false;
        }
        
        bool isEmpty() const{
            if (this->_size == 0)
                return true;
            return false;
        }
        
        T& back() {
            __ESBMC_assert(!empty(),
                           "\n  This method returns a reference to the last element in the list container.\n  Therefore, the list can't be empty.\n");
            return this->_list[this->_size-1];
        }
        
        const T& back() const{
            __ESBMC_assert(!empty(),
                           "\n  This method returns a reference to the last element in the list container.\n  Therefore, the list can't be empty.\n");
            return this->_list[this->_size-1];
        }
        
        T& last() {
            __ESBMC_assert(!empty(),
                           "\n  This method returns a reference to the last element in the list container.\n  Therefore, the list can't be empty.\n");
            return this->_list[this->_size-1];
        }
        
        const T& last() const{
            __ESBMC_assert(!empty(),
                           "\n  This method returns a reference to the last element in the list container.\n  Therefore, the list can't be empty.\n");
            return this->_list[this->_size-1];
        }
        
        T& front() {
            __ESBMC_assert(!empty(),
                           "  This method returns a reference to the first element in the list container.\n  Therefore, the list can't be empty.\n");
            return this->_list[0];
        }
        
        const T& front() const {
            __ESBMC_assert(!empty(),
                           "  This method returns a reference to the first element in the list container.\n  Therefore, the list can't be empty.\n");
            return this->_list[0];
        }
        
        void pop_front() {
            __ESBMC_assert(!empty(),
                           "\n  This method removes the first element in the list container.\n  Therefore, the list can't be empty.\n");
            this->_size--;
            for(int i = 0; i < this->_size; i++){
                this->_list[i] = this->_list[i+1];
            }
            this->_list[this->_size + 1] = value_type();
        }
        
        void pop_back() {
            __ESBMC_assert(!empty(),
                           "\n  This method removes the last element in the list container.\n  Therefore, the list can't be empty.\n");
            this->_list[this->_size -1] = value_type();
            this->_size--;
        }
        
        void push_back(const value_type& x) {
            this->_list[this->_size] = x;
            this->_size++;
        }
        
        void push_front(const value_type& x) {
            if (this->_size != 0) {
                for(int i = this->_size -1; i > -1; i--){
                    this->_list[i+1] = this->_list[i];
                }
            }
            this->_list[0] = x;
            this->_size++;
        }
        
        iterator insert(iterator& position, const value_type& x) {
            for(int i = position.pos; i < this->_size; i++){
                this->_list[i + 1] = this->_list[i];
            }
            this->_list[position.pos] = x;
            this->_size++;
            position.pos++;
            position.it = &(this->_list[position.pos]);
            return position;
        }
        
        void insert(int position, const value_type& x) {
            for(int i = position; i < this->_size; i++){
                this->_list[i + 1] = this->_list[i];
            }
            this->_list[position] = x;
            this->_size++;
        }
        
        int lastIndexOf(const T& value, int from = -1) const{
            __ESBMC_assert(from >= -1 && from < this->_size, "Position invalid.");
            if (from == -1)
                from = this->_size;
            for (int i = from; i > -1; i--)
                if (this->_list[i] == value)
                    return i;
            return -1;
        }
        
        iterator& erase(iterator& position) {
            this->_size--;
            for(int i = position.pos; i <  this->_size; i++){
                this->_list[i] = this->_list[i+1];
            }
            this->_list[this->_size] = value_type();
            position.it = &(this->_list[position.pos]);
            return position;
        }
        
        iterator& erase(iterator& position, iterator& last) {
            while(position.pos != last.pos){
                this->erase(position);
                position++;
            }
            return last;
        }
        
        void swap(QList<value_type>& x) {
            QList<value_type> _tmp;
            for(int i = 0; i < this->_size; i++)
                _tmp._list[i] = this->_list[i];
            _tmp._size = this->_size;
            this->clear();
            for(int i = 0; i < x._size; i++)
                this->_list[i] = x._list[i];
            this->_size = x._size;
            x.clear();
            for(int i = 0; i < _tmp._size; i++)
                x._list[i] = _tmp._list[i];
            x._size = _tmp._size;
        }
        
        void clear() {
            this->~QList();
        }
        
        bool operator==(const QList<T>& other) {
            if (this->_size == other._size)
                return true;
            //TODO
            //for(int i = 0; i <  this->_size; i++)
            //	if(this->_list[i] != y._list[i])
            //		return false;
            return false;
        }
        
        bool operator!=(const QList<T>& other) {
            if (this->_size != other._size)
                return true;
            //TODO
            //for(int i = 0; i <  this->_size; i++)
            //	if(this->_list[i] != y._list[i])
            //		return false;
            return false;
        }
        
        QList<T> operator+(const QList<T>& other) {
            QList<T> _tmp;
            int i = 0;
            for (; i < this->_size; i++)
                _tmp._list[i] = this->_list[i];
            for (int j = 0; j < other._size; j++, i++) {
                _tmp._list[i] = other._list[j];
            }
            return _tmp;
        }
        
        QList<T>& operator+=(const QList<T> & other) {
            int i = this->_size;
            for (int j = 0; j < other._size; j++, i++) {
                this->push_back(other._list[j]);
            }
            return *this;
        }
        
        QList<T>& operator+=(const T & value) {
            this->push_back(value);
            return *this;
        }
        
        QList<T>& operator<<(const QList<T> & other) {
            for (int i = 0; i < other._size; i++)
                this->push_back(other._list[i]);
            return *this;
        }
        
        QList<T>& operator<<(const T& value) {
            this->push_back(value);
            return *this;
        }
        
        QList<T>& operator=(const QList<T> & other) {
            this->clear();
            for (int i = 0; i < other._size; i++)
                this->push_back(other._list[i]);
            return *this;
        }
        
        //bool operator=(QList<T> && other) {
            //TODO
        //}
        
        T& operator[](int i) {
            __ESBMC_assert( i >= 0 && i < this->_size, "Position invalid.");
            return this->_list[i];
        }
        
        const T& operator[](int i) const {
            __ESBMC_assert( i >= 0 && i < this->_size, "Position invalid.");
            return this->_list[i];
        }
        
        static QList<T> fromSet(const QSet<T> & set){
            //TODO
        }
        
        static QList<T> fromStdList(const std::list<T>& list){
            //TODO
        }
        
//        static QList<T> fromVector(const QVector<T> & vector){
            //TODO
  //      }
        
    };
#endif