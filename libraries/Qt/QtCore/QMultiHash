/*******************************************************************\

Module: Qt

Author: Felipe Monteiro

Date: August 2015

\*******************************************************************/

#ifndef __QMULTIHASH
#define __QMULTIHASH

#include "QHash"

#define QMULTIHASH_SIZE 20

template<class Key, class T>
class QMultiHash : public QHash < Key , T > {
public:
    QMultiHash(){
        this->_size = 0;
    }
    
    //QMultiHash(std::initializer_list<std::pair<Key, T> > list){
        //TODO
    //}
    
    QMultiHash(const QHash<Key, T> & other){
        this->_size = other._size;
        size_type s = other._size;
        for (int i = 0; i < s; i++) {
            this->_key[i] = other._key[i];
            this->_value[i] = other._value[i];
        }
    }
    
    QHash<Key, T>::const_iterator	constFind(const Key & key, const T & value) const {
        unsigned int s = this->_size;
        const_iterator it = this->begin();
        if (this->_size == 0) {
            return it;
        } else {
            for (int i = 0; i < s; i++) {
                if (this->_key[i] == key && this->_value[i] == value) {
                    return it;
                }
                it++;
            }
            return this->end();
        }
    }
    
    bool	contains(const Key & key, const T & value) const {
        unsigned int s = this->_size;
        iterator it = this->begin();
        if (this->_size == 0)
            return false;
        for (int i = 0; i < s; i++)
            if (this->_key[i] == key && this->_value[i] == value)
                return true;
        return false;
    }
    
    int	count(const Key & key, const T & value) const{
        int accum = 0;
        if (this->_size != 0) {
            int s = this->_size;
            for (int i = 0; i < s; i++) {
                if (this->_key[i] == key && this->_value[i] == value) {
                    accum++;
                }
            }
        }
        return accum;
    }
    
    QHash<Key, T>::iterator	find(const Key & key, const T & value){
        unsigned int s = this->_size;
        iterator it = this->begin();
        if (this->_size == 0) {
            return it;
        } else {
            for (int i = 0; i < s; i++) {
               if (this->_key[i] == key && this->_value[i] == value) {
                    return it;
                }
                it++;
            }
            return this->end();
        }
    }
    
    QHash<Key, T>::const_iterator	find(const Key & key, const T & value) const{
        unsigned int s = this->_size;
        const_iterator it = this->begin();
        if (this->_size == 0) {
            return it;
        } else {
            for (int i = 0; i < s; i++) {
                if (this->_key[i] == key && this->_value[i] == value) {
                    return it;
                }
                it++;
            }
            return this->end();
        }
    }
    
    QHash<Key, T>::iterator	insert(const Key & key, const T & value){
        value_type val = pair<Key,T>(key, value);
        size_type s = this->_size;
        if (this->_size == 0) {
            this->_key[0] = val.first;
            this->_value[0] = val.second;
            this->_size++;
            return this->begin();
        } else {
            QHash<Key, T>::iterator it = this->begin();
            for (int i = 0; i < s; i++) {
                if(val.first < this->_key[i] || this->_key[i] == key ){
                    int j;
                    Key y = val.first;
                    Key t = Key();
                    T u = T();
                    T v = val.second;
                    
                    for (j = i; j <= s; j++) {
                        t = this->_key[j];
                        this->_key[j] = y;
                        y = t;
                        u = this->_value[j];
                        this->_value[j] = v;
                        v = u;
                    }
                    this->_size++;
                    return it;
                }
                it++;
            }
            this->_size++;
            this->_key[s] = val.first;
            this->_value[s] = val.second;
            return this->end();
        }
    }
    
    int	remove(const Key & key, const T & value){
        int accum = 0;
        for(iterator it = this->begin(); it != this->end(); it++){
            if (it.it_key[it.it_pos] == key && it.it_value[it.it_pos] == value) {
                this->erase(it);
                accum++;
            }
        }
        return accum;
    }
    
    QHash<Key, T>::iterator	replace(const Key & key, const T & value){
        value_type val = pair<Key,T>(key, value);
        size_type s = this->_size;
        if (this->_size == 0) {
            this->_key[0] = val.first;
            this->_value[0] = val.second;
            this->_size++;
            return this->begin();
        } else {
            QHash<Key, T>::iterator it = this->begin();
            for (int i = 0; i < s; i++) {
                if (this->_key[i] == val.first) {
                    this->_value[i] = value;
                    return it;
                }
                if(val.first < this->_key[i]){
                    int j;
                    Key y = val.first;
                    Key t = Key();
                    T u = T();
                    T v = val.second;
                    
                    for (j = i; j <= s; j++) {
                        t = this->_key[j];
                        this->_key[j] = y;
                        y = t;
                        u = this->_value[j];
                        this->_value[j] = v;
                        v = u;
                    }
                    this->_size++;
                    return it;
                }
                it++;
            }
            this->_size++;
            this->_key[s] = val.first;
            this->_value[s] = val.second;
            return this->end();
        }
    }
    
    void	swap(QMultiHash & other) {
        QMultiHash tmp;
        tmp = *this;
        *this = other;
        other = tmp;
    }
    
    QMultiHash	operator+( QMultiHash & other ) {
        for (int i = 0; i < other.size(); i++) {
            this->insert(other._key[i], other._value[i]);
        }
        return *this;
    }
    
    QMultiHash &	operator+=( QMultiHash & other ){
        for (int i = 0; i < other.size(); i++) {
            this->insert(other._key[i], other._value[i]);
        }
        return *this;
    }
};

#endif
//EOF